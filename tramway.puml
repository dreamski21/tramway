@startuml tramway

class WorldController {
  updateView(): void
}
WorldController -- WorldModel
WorldController -- WorldView

class WorldView {
  setLightColor(int lightId, TrafficColor color)

  getGraphicSegment(int tramId): int

  createTram(int tramId)
  deleteTram(int tramId)
  setTramDynamic(int tramId, boolean isDynamic)
  setTramProgress(int tramId, Duration dur)
  getTramProgress(int tramId): Duration
}

class WorldModel {
  segmentQueues: List

  perhapsCreateCar()

  startAll()
  stopAll()
}
WorldModel *-- "5" Tram
WorldModel *-- "0..6" Car
WorldModel *-- "1" BridgeArbiter
WorldModel *-- "1" IntersectionArbiter

abstract class TrafficArbiter {
  p(Semaphore x): void
  v(Semaphore x): void
  getPermit(TrafficDirection dir): void
  releasePermit(TrafficDirection dir): void
}

class BridgeArbiter {
}
BridgeArbiter --|> TrafficArbiter

class IntersectionArbiter {
}
IntersectionArbiter --|> TrafficArbiter

abstract class Vehicle {
  dir: TrafficDirection
  canAdvance: Semaphore

  getCode():int

  advance(): void
  enter(): void
  leave(): void
}
class Tram {
}
class Car {
}
Tram --|> Vehicle
Car --|> Vehicle
Vehicle -- TrafficArbiter

Vehicle --|> Thread

enum TrafficColor {
  GREEN
  RED
  YELLOW
}

enum TrafficDirection {
  NORTH
  SOUTH
  EAST
  WEST
}

@enduml
