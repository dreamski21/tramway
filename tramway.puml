@startuml tramway

class WorldController {
  updateView(): void
}
WorldController -- WorldModel
WorldController -- WorldViewInterface

interface WorldViewInterface {
  setLightColor(int lightId, TrafficColor color)

  createTram(int tramId)
  destroyTram(int tramId)
  getGraphicSegment(int tramId): int
  setTramDynamic(int tramId, boolean isDynamic)
  getTramProgress(int tramId): double
  setTramProgress(int tramId, double progress)
}
WorldViewInterface <|.. WorldViewFx
WorldViewInterface <|.. WorldViewText

class WorldModel {
  segmentQueues: List<Tram>[]
  carsGoingNorth: List<Car>
  carsGoingSouth: List<Car>

  perhapsCreateCar()

  startAll()
  stopAll()
}
WorldModel *-- "5" Tram
WorldModel *-- "0..4" Car
WorldModel *-- "1" BridgeArbiter
WorldModel *-- "1" IntersectionArbiter

abstract class TrafficArbiter {
  getPermit(TrafficDirection dir): void
  releasePermit(TrafficDirection dir): void

  p(Semaphore x): void
  v(Semaphore x): void
}

class BridgeArbiter {
}
BridgeArbiter --|> TrafficArbiter

class IntersectionArbiter {
}
IntersectionArbiter --|> TrafficArbiter

abstract class Vehicle {
  dir: TrafficDirection
  canAdvance: Semaphore
  logicSegment: int
  code: int

  advance(): void
  enter(): void
  leave(): void
}
class Tram {
}
class Car {
}
Tram --|> Vehicle
Car --|> Vehicle
Vehicle -- TrafficArbiter

Vehicle --|> Thread

enum TrafficColor {
  GREEN
  RED
  YELLOW
}

enum TrafficDirection {
  NORTH
  SOUTH
  EAST
  WEST
}

@enduml
